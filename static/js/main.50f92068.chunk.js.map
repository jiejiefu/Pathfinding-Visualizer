{"version":3,"sources":["serviceWorker.js","mazeAlgorithms/recursiveDivision.js","mazeAlgorithms/verticalMaze.js","mazeAlgorithms/horizontalMaze.js","pathfindingVisualizer/Node/node.jsx","pathfindingVisualizer/navbar.jsx","pathfindingAlgorithms/dijkstra.js","pathfindingAlgorithms/astar.js","pathfindingAlgorithms/breadthFirstSearch.js","pathfindingAlgorithms/depthFirstSearch.js","pathfindingAlgorithms/randomWalk.js","pathfindingAlgorithms/greedyBestFirstSearch.js","pathfindingAlgorithms/bidirectionalGreedySearch.js","pathfindingVisualizer/pathfindingVisualizer.jsx","mazeAlgorithms/randomMaze.js","index.js"],"names":["Boolean","window","location","hostname","match","walls","Node","props","state","cellHeight","this","row","col","isStart","isFinish","isWall","isVisited","isShortest","onMouseEnter","onMouseDown","onMouseUp","width","height","numRows","numColumns","extraClass","cellWidth","Math","floor","id","className","style","Component","brand","innerWidth","NavBar","algorithm","maze","pathState","mazeState","speedState","selection","visualizingAlgorithm","setState","clearPath","generatingMaze","clearGrid","visualizeDijkstra","visualizeAStar","visualizeGreedyBFS","visualizeBidirectionalGreedySearch","visualizeBFS","visualizeDFS","visualizeRandomWalk","clearTemp","generateRandomMaze","generateRecursiveDivisionMaze","generateVerticalMaze","generateHorizontalMaze","speed","value","updateSpeed","href","type","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","onClick","selectAlgorithm","visualizeAlgorithm","selectMaze","generateMaze","changeSpeed","stopAnimation","dijkstra","grid","startNode","finishNode","distance","unvisitedNodes","nodes","node","push","getNodes","visitedNodesInOrder","length","sort","a","b","closestNode","shift","Infinity","updateUnvisitedNeighbours","unvisitedNeighbours","neighbours","filter","neighbour","getUnvisitedNeighbours","unvisitedNeighbour","previousNode","getNeighbours","neighbourNotInUnvisitedNodes","manhattenDistance","abs","shuffle","array","i","j","random","getRandomNeighbour","neighboursFilteredStartAndWall","neighboursFilteredVisited","numNodesVisited","count","isNeighbour","closestNodeStart","closestNodeFinish","rowStart","colStart","rowFinish","colFinish","nodeA","nodeB","recursiveDivisionMaze","vertical","range","horizontal","getRecursiveWalls","dir","num","generateOddRandomNumber","addWall","slice","indexOf","len","result","max","randomNum","isStartFinish","tempWalls","temp","splice","generateRandomNumber","wall","verticalMaze","totalLength","topAndRight","leftAndBottom","getPeripheralWall","choice","getVerticalWalls","horizontalMaze","getHorizontalWalls","initialNum","getInitialNum","innerHeight","initialNumRows","initialNumColumns","startFinishNode","randomNums","x","y","startNodeRow","startNodeCol","finishNodeRow","finishNodeCol","getRandomNums","getNumberfromArray","getStartFinishNode","PathfindingVisualizer","mouseIsPressed","movingStartorFinish","mazeSpeed","updateDimensions","path","animateShortestPath","nodesInShortestPathOrder","setTimeout","newGrid","updateNodesForRender","document","getElementById","k","animateAlgorithm","newNode","animateRandomWalk","nodeCounts","Map","has","get","val","set","animateMaze","getNewGridWithMaze","addEventListener","getInitialGrid","isStartorFinish","getNewGridWithWalls","getNewGridWithNewStartorFinish","getGridWithoutPath","name","animation","styleSheetList","styleSheets","listIndex","styleSheet","Object","keys","cssRules","item","cssRule","index","visitedNodesInOrderStart","visitedNodesInOrderFinish","isShortedPath","getVisitedNodesInOrder","undefined","currentNode","unshift","getNodesInShortestPathOrderDijkstra","totalDistance","astar","getNodesInShortestPathOrderAstar","breadthFirstSearch","getNodesInShortestPathOrderBFS","depthFirstSearch","getNodesInShortestPathOrderDFS","maxNodes","maxNodesVisitedTracker","loopTracker","randomNeighbour","nodesVisited","randomWalk","greedyBFS","getNodesInShortestPathOrderGreedyBFS","unvisitedNodesStart","unvisitedNodesFinish","bidirectionalGreedySearch","getNodesInShortestPathOrderBidirectionalGreedySearch","animateBidirectionalAlgorithm","randomMaze","Fragment","bind","map","rowId","key","nodeId","handleMouseDown","handleMouseEnter","handleMouseUp","randomNums1","randomNums2","currentRow","createNode","movingGrid","newStart","newFinish","n","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.50f92068.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","let walls;\nexport function recursiveDivisionMaze(grid, startNode, finishNode) {\n  if (!startNode || !finishNode || startNode === finishNode) {\n    return false;\n  }\n  let vertical = range(grid[0].length);\n  let horizontal = range(grid.length);\n  walls = [];\n  getRecursiveWalls(vertical, horizontal, grid, startNode, finishNode);\n  return walls;\n}\n\nfunction range(len) {\n  let result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(i);\n  }\n  return result;\n}\n\n//dir === 0 => Horizontal\n//dir === 1 => Vertical\n\nfunction getRecursiveWalls(vertical, horizontal, grid, startNode, finishNode) {\n  if (vertical.length < 2 || horizontal.length < 2) {\n    return;\n  }\n  let dir;\n  let num;\n  if (vertical.length > horizontal.length) {\n    dir = 0;\n    num = generateOddRandomNumber(vertical);\n  }\n  if (vertical.length <= horizontal.length) {\n    dir = 1;\n    num = generateOddRandomNumber(horizontal);\n  }\n\n  if (dir === 0) {\n    addWall(dir, num, vertical, horizontal, startNode, finishNode);\n    getRecursiveWalls(\n      vertical.slice(0, vertical.indexOf(num)),\n      horizontal,\n      grid,\n      startNode,\n      finishNode\n    );\n    getRecursiveWalls(\n      vertical.slice(vertical.indexOf(num) + 1),\n      horizontal,\n      grid,\n      startNode,\n      finishNode\n    );\n  } else {\n    addWall(dir, num, vertical, horizontal, startNode, finishNode);\n    getRecursiveWalls(\n      vertical,\n      horizontal.slice(0, horizontal.indexOf(num)),\n      grid,\n      startNode,\n      finishNode\n    );\n    getRecursiveWalls(\n      vertical,\n      horizontal.slice(horizontal.indexOf(num) + 1),\n      grid,\n      startNode,\n      finishNode\n    );\n  }\n}\n\nfunction generateOddRandomNumber(array) {\n  let max = array.length - 1;\n  let randomNum =\n    Math.floor(Math.random() * (max / 2)) +\n    Math.floor(Math.random() * (max / 2));\n  if (randomNum % 2 === 0) {\n    if (randomNum === max) {\n      randomNum -= 1;\n    } else {\n      randomNum += 1;\n    }\n  }\n  return array[randomNum];\n}\n\n//dir === 0 => Horizontal\n//dir === 1 => Vertical\n\nfunction addWall(dir, num, vertical, horizontal, startNode, finishNode) {\n  let isStartFinish = false;\n  let tempWalls = [];\n  if (dir === 0) {\n    if (horizontal.length === 2) return;\n    for (let temp of horizontal) {\n      if (\n        (temp === startNode.row && num === startNode.col) ||\n        (temp === finishNode.row && num === finishNode.col)\n      ) {\n        isStartFinish = true;\n        continue;\n      }\n      tempWalls.push([temp, num]);\n    }\n  } else {\n    if (vertical.length === 2) return;\n    for (let temp of vertical) {\n      if (\n        (num === startNode.row && temp === startNode.col) ||\n        (num === finishNode.row && temp === finishNode.col)\n      ) {\n        isStartFinish = true;\n        continue;\n      }\n      tempWalls.push([num, temp]);\n    }\n  }\n  if (!isStartFinish) {\n    // \"splice\", leave a channel to pass\n    tempWalls.splice(generateRandomNumber(tempWalls.length), 1);\n  }\n  for (let wall of tempWalls) {\n    walls.push(wall);\n  }\n}\n\nfunction generateRandomNumber(max) {\n  let randomNum =\n    Math.floor(Math.random() * (max / 2)) +\n    Math.floor(Math.random() * (max / 2));\n  if (randomNum % 2 !== 0) {\n    if (randomNum === max) {\n      randomNum -= 1;\n    } else {\n      randomNum += 1;\n    }\n  }\n  return randomNum;\n}\n","let walls;\nexport function verticalMaze(grid, startNode, finishNode) {\n  if (!startNode || !finishNode || startNode === finishNode) {\n    return false;\n  }\n  let vertical = range(grid[0].length);\n  let horizontal = range(grid.length);\n  walls = [];\n  getPeripheralWall(grid, startNode, finishNode);\n  getVerticalWalls(vertical, horizontal, startNode, finishNode);\n  return walls;\n}\n\nfunction range(len) {\n  let result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(i);\n  }\n  return result;\n}\n\nfunction getVerticalWalls(vertical, horizontal, startNode, finishNode) {\n  if (vertical.length < 2) {\n    return;\n  }\n\n  let choice = Math.floor(Math.random() * 2);\n  for (let num of vertical) {\n    if (choice === 0 && num % 2 !== 0) {\n      addWall(num, horizontal, startNode, finishNode);\n    }\n    if (choice === 1 && num % 2 === 0) {\n      addWall(num, horizontal, startNode, finishNode);\n    }\n  }\n}\n\nfunction addWall(num, horizontal, startNode, finishNode) {\n  let isStartFinish = false;\n  let tempWalls = [];\n  for (let temp of horizontal) {\n    if (\n      (temp === startNode.row && num === startNode.col) ||\n      (temp === finishNode.row && num === finishNode.col)\n    ) {\n      isStartFinish = true;\n      continue;\n    }\n    tempWalls.push([temp, num]);\n  }\n  if (!isStartFinish) {\n    tempWalls.splice(Math.floor(Math.random() * tempWalls.length), 1);\n  }\n  for (let wall of tempWalls) {\n    walls.push(wall);\n  }\n}\n\n// if num of vertical num % 2 === 0 (line:32), the mostleft wall will be duplicated\nfunction getPeripheralWall(grid, startNode, finishNode) {\n  let row = 0;\n  let col = 0;\n  let totalLength = grid.length + grid[0].length;\n  let topAndRight = [];\n  let leftAndBottom = [];\n  for (let i = 0; i < totalLength - 1; i++) {\n    if (i < grid[0].length - 1)\n      topAndRight.push([0, i]);\n    if (i >= grid[0].length - 1) {\n      topAndRight.push([row, grid[0].length - 1]);\n      row++;\n    }\n\n    if (i < grid.length - 1)\n      leftAndBottom.push([i, 0]);\n    if (i >= grid.length - 1) {\n      leftAndBottom.push([grid.length - 1, col]);\n      col++;\n    }\n\n    walls.push(topAndRight[i]);\n    walls.push(leftAndBottom[i]);\n  }\n}","let walls;\nexport function horizontalMaze(grid, startNode, finishNode) {\n  if (!startNode || !finishNode || startNode === finishNode) {\n    return false;\n  }\n  let vertical = range(grid[0].length);\n  let horizontal = range(grid.length);\n  walls = [];\n  getHorizontalWalls(vertical, horizontal, startNode, finishNode);\n  return walls;\n}\n\nfunction range(len) {\n  let result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(i);\n  }\n  return result;\n}\n\nfunction getHorizontalWalls(vertical, horizontal, startNode, finishNode) {\n  if (horizontal.length < 2) {\n    return;\n  }\n\n  let choice = Math.floor(Math.random() * 2);\n  for (let num of horizontal) {\n    if (choice === 0 && num % 2 !== 0) {\n      addWall(num, vertical, startNode, finishNode);\n    }\n    if (choice === 1 && num % 2 === 0) {\n      addWall(num, vertical, startNode, finishNode);\n    }\n  }\n}\n\nfunction addWall(num, vertical, startNode, finishNode) {\n  let isStartFinish = false;\n  let tempWalls = [];\n  for (let temp of vertical) {\n    if (\n      (num === startNode.row && temp === startNode.col) ||\n      (num === finishNode.row && temp === finishNode.col)\n    ) {\n      isStartFinish = true;\n      continue;\n    }\n    tempWalls.push([num, temp]);\n  }\n  if (!isStartFinish) {\n    tempWalls.splice(Math.floor(Math.random() * tempWalls.length), 1);\n    for (let i = 0; i < Math.abs(num - startNode.row) / 2; i++) {\n      if (Math.random() > 0.5)\n        tempWalls.splice(Math.floor(Math.random() * tempWalls.length), 1);\n    }\n  }\n  if (num === finishNode.row) {\n    tempWalls.push([num - 1, (startNode.col + finishNode.col) / 2]); // add an obstacle near finishNode\n    tempWalls.splice(tempWalls.length - finishNode.col, 1); // remove a wall at the finishNode.row\n    tempWalls.push([num + 1, (finishNode.col - startNode.col)]); // add an obstacle near finishNode\n  }\n  for (let wall of tempWalls) {\n    walls.push(wall);\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./node.css\";\n\nclass Node extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    const {\n      row,\n      col,\n      isStart,\n      isFinish,\n      isWall,\n      isVisited,\n      isShortest,\n      onMouseEnter,\n      onMouseDown,\n      onMouseUp,\n      width,\n      height,\n      numRows,\n      numColumns,\n    } = this.props;\n\n    const extraClass = isStart\n      ? \"node node-start\"\n      : isFinish\n      ? \"node node-finish\"\n      : isWall\n      ? \"node-wall\"\n      : isShortest\n      ? \"node node-shortest-path\"\n      : isVisited\n      ? \"node node-visited\"\n      : \"node\";\n\n    let cellWidth = Math.floor((width - 15) / numColumns);\n    let cellHeight;\n    if (width > 1500) {\n      cellHeight = Math.floor((height - 70) / numRows);\n    } else if (width > 1000) {\n      cellHeight = Math.floor((height - 70) / numRows);\n    } else if (width > 500) {\n      cellHeight = Math.floor((height - 60) / numRows);\n    } else if (width > 0) {\n      cellHeight = Math.floor((height - 50) / numRows);\n    }\n\n    return (\n      <div\n        id={`node-${row}-${col}`}\n        className={`${extraClass}`}\n        style={{ \"--width\": `${cellWidth}px`, \"--height\": `${cellHeight}px` }}\n        onMouseEnter={() => onMouseEnter(row, col)}\n        onMouseDown={() => onMouseDown(row, col)}\n        onMouseUp={() => onMouseUp()}\n      ></div>\n    );\n  }\n}\n\nexport default Node;\n","import React, { Component } from \"react\";\nimport \"./navbar.css\";\n\nconst brand = window.innerWidth > 600 ? \"Pathfinding Visualizer\" : \"Pathfinder\";\n\nclass NavBar extends Component {\n  state = {\n    algorithm: \"Visualize Algorithm\",\n    maze: \"Generate Maze\",\n    pathState: false,\n    mazeState: false,\n    speedState: \"Speed\",\n  };\n\n  selectAlgorithm(selection) {\n    if (this.props.visualizingAlgorithm) {\n      return;\n    }\n    if (\n      selection === this.state.algorithm ||\n      this.state.algorithm === \"Visualize Algorithm\" ||\n      this.state.algorithm === \"Select an Algorithm!\"\n    ) {\n      this.setState({ algorithm: selection });\n    } else if (this.state.pathState) {\n      this.clearPath();\n      this.setState({ algorithm: selection });\n    } else {\n      this.setState({ algorithm: selection });\n    }\n  }\n\n  selectMaze(selection) {\n    if (this.props.visualizingAlgorithm || this.props.generatingMaze) {\n      return;\n    }\n    if (\n      selection === this.state.maze ||\n      this.state.maze === \"Generate Maze\" ||\n      this.state.maze === \"Select a Maze!\"\n    ) {\n      this.setState({ maze: selection });\n    } else if (!this.state.mazeState) {\n      this.setState({ maze: selection });\n    } else {\n      this.clearGrid();\n      this.setState({ maze: selection });\n    }\n  }\n\n  visualizeAlgorithm() {\n    if (this.props.visualizingAlgorithm || this.props.generatingMaze) {\n      return;\n    }\n    if (this.state.pathState) {\n      this.clearPath();// Only clear the path we went through, not the maze\n      return;\n    }\n    if (\n      this.state.algorithm === \"Visualize Algorithm\" ||\n      this.state.algorithm === \"Select an Algorithm!\"\n    ) {\n      this.setState({ algorithm: \"Select an Algorithm!\" });\n    } else {\n      this.setState({ pathState: true });\n      if (this.state.algorithm === \"Visualize Dijkstra\")\n        this.props.visualizeDijkstra();\n      else if (this.state.algorithm === \"Visualize A*\")\n        this.props.visualizeAStar();\n      else if (this.state.algorithm === \"Visualize Greedy BFS\")\n        this.props.visualizeGreedyBFS();\n      else if (this.state.algorithm === \"Visualize Bidirectional Greedy\")\n        this.props.visualizeBidirectionalGreedySearch();\n      else if (this.state.algorithm === \"Visualize Breadth First Search\")\n        this.props.visualizeBFS();\n      else if (this.state.algorithm === \"Visualize Depth First Search\")\n        this.props.visualizeDFS();\n      else if (this.state.algorithm === \"Visualize Random Walk\")\n        this.props.visualizeRandomWalk();\n    }\n  }\n\n  generateMaze() {\n    if (this.props.visualizingAlgorithm || this.props.generatingMaze) {\n      return;\n    }\n    if (this.state.mazeState || this.state.pathState) {\n      this.clearTemp();\n    }\n    if (\n      this.state.maze === \"Generate Maze\" ||\n      this.state.maze === \"Select a Maze!\"\n    ) {\n      this.setState({ maze: \"Select a Maze!\" });\n    } else {\n      this.setState({ mazeState: true });\n      if (this.state.maze === \"Generate Random Maze\")\n        this.props.generateRandomMaze();\n      else if (this.state.maze === \"Generate Recursive Maze\")\n        this.props.generateRecursiveDivisionMaze();\n      else if (this.state.maze === \"Generate Vertical Maze\")\n        this.props.generateVerticalMaze();\n      else if (this.state.maze === \"Generate Horizontal Maze\")\n        this.props.generateHorizontalMaze();\n    }\n  }\n\n  clearGrid() {\n    if (this.props.visualizingAlgorithm || this.props.generatingMaze) {\n      return;\n    }\n    this.props.clearGrid();\n    this.setState({\n      algorithm: \"Visualize Algorithm\",\n      maze: \"Generate Maze\",\n      pathState: false,\n      mazeState: false,\n    });\n  }\n\n  clearPath() {\n    if (this.props.visualizingAlgorithm || this.props.generatingMaze) {\n      return;\n    }\n    this.props.clearPath();\n    this.setState({\n      pathState: false,\n      mazeState: false,\n    });\n  }\n\n  clearTemp() {\n    if (this.props.visualizingAlgorithm || this.props.generatingMaze) {\n      return;\n    }\n    this.props.clearGrid();\n    this.setState({\n      pathState: false,\n      mazeState: false,\n    });\n  }\n\n  changeSpeed(speed) {\n    if (this.props.visualizingAlgorithm || this.props.generatingMaze) {\n      return;\n    }\n    let value = [10, 10];\n    if (speed === \"Slow\") value = [50, 30];\n    else if (speed === \"Medium\") value = [25, 15];\n    else if (speed === \"Fast\") value = [5, 2.5];\n    this.setState({ speedState: speed });\n    this.props.updateSpeed(value[0], value[1]);\n  }\n\n  stopAnimation() {\n    if (!this.state.pathState) return;\n  }\n\n  render() {\n    return (\n      <nav className=\"navbar navbar-expand navbar-dark bg-dark\">\n        <a\n          className=\"navbar-brand h1 mb-0\"\n          href=\"https://jiejiefu.github.io/Pathfinding-Visualizer/\"\n        >\n          {brand}\n        </a>\n        <div className=\"navbar-collapse\" id=\"navbarNavDropdown\">\n          <ul className=\"navbar-nav\">\n            <li className=\"nav-item dropdown\">\n              <div className=\"dropdown\">\n                <button\n                  className=\"btn btn-light dropdown-toggle\"\n                  type=\"button\"\n                  id=\"dropdownMenu1\"\n                  data-toggle=\"dropdown\"\n                  aria-haspopup=\"true\"\n                  aria-expanded=\"false\"\n                >\n                  Algorithms\n                </button>\n                <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenu1\">\n                  <button\n                    className=\"dropdown-item btn-light\"\n                    type=\"button\"\n                    onClick={() => this.selectAlgorithm(\"Visualize Dijkstra\")}\n                  >\n                    Dijkstra's Algorithm\n                  </button>\n                  <button\n                    className=\"dropdown-item btn-light\"\n                    type=\"button\"\n                    onClick={() => this.selectAlgorithm(\"Visualize A*\")}\n                  >\n                    A* Algorithm\n                  </button>\n                  <button\n                    className=\"dropdown-item btn-light\"\n                    type=\"button\"\n                    onClick={() => this.selectAlgorithm(\"Visualize Greedy BFS\")}\n                  >\n                    Greedy Best First Search\n                  </button>\n                  <button\n                    className=\"dropdown-item btn-light\"\n                    type=\"button\"\n                    onClick={() =>\n                      this.selectAlgorithm(\"Visualize Bidirectional Greedy\")\n                    }\n                  >\n                    Bidirectional Greedy Search\n                  </button>\n                  <div className=\"dropdown-divider\"></div>\n                  <button\n                    className=\"dropdown-item btn-light\"\n                    type=\"button\"\n                    onClick={() =>\n                      this.selectAlgorithm(\"Visualize Breadth First Search\")\n                    }\n                  >\n                    Breadth First Search\n                  </button>\n                  <button\n                    className=\"dropdown-item btn-light\"\n                    type=\"button\"\n                    onClick={() =>\n                      this.selectAlgorithm(\"Visualize Depth First Search\")\n                    }\n                  >\n                    Depth First Search\n                  </button>\n                  <button\n                    className=\"dropdown-item btn-light\"\n                    type=\"button\"\n                    onClick={() =>\n                      this.selectAlgorithm(\"Visualize Random Walk\")\n                    }\n                  >\n                    Random Walk\n                  </button>\n                </div>\n              </div>{\" \"}\n            </li>\n            <li>\n              <button\n                type=\"button\"\n                className=\"btn btn-success\"\n                onClick={() => this.visualizeAlgorithm()}\n              >\n                {this.state.algorithm}\n              </button>\n            </li>\n            <li className=\"nav-item dropdown\">\n              <div className=\"dropdown\">\n                <button\n                  className=\"btn btn-light dropdown-toggle\"\n                  type=\"button\"\n                  id=\"dropdownMenu1\"\n                  data-toggle=\"dropdown\"\n                  aria-haspopup=\"true\"\n                  aria-expanded=\"false\"\n                >\n                  Mazes\n                </button>\n                <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenu1\">\n                  <button\n                    className=\"dropdown-item btn-light\"\n                    type=\"button\"\n                    onClick={() => this.selectMaze(\"Generate Random Maze\")}\n                  >\n                    Random Maze\n                  </button>\n                  <button\n                    className=\"dropdown-item btn-light\"\n                    type=\"button\"\n                    onClick={() => this.selectMaze(\"Generate Recursive Maze\")}\n                  >\n                    Recursive Division Maze\n                  </button>\n                  <button\n                    className=\"dropdown-item btn-light\"\n                    type=\"button\"\n                    onClick={() => this.selectMaze(\"Generate Vertical Maze\")}\n                  >\n                    Vertical Division Maze\n                  </button>\n                  <button\n                    className=\"dropdown-item btn-light\"\n                    type=\"button\"\n                    onClick={() => this.selectMaze(\"Generate Horizontal Maze\")}\n                  >\n                    Horizontal Division Maze\n                  </button>\n                </div>\n              </div>{\" \"}\n            </li>\n            <li>\n              <button\n                type=\"button\"\n                className=\"btn btn-success\"\n                onClick={() => this.generateMaze()}\n              >\n                {this.state.maze}\n              </button>\n            </li>\n            <li>\n              <button\n                type=\"button\"\n                className=\"btn btn-danger\"\n                onClick={() => this.clearGrid()}\n              >\n                Clear Gird\n              </button>\n            </li>\n            <li className=\"nav-item dropdown\">\n              <div className=\"dropdown\">\n                <button\n                  className=\"btn btn-info dropdown-toggle\"\n                  type=\"button\"\n                  id=\"dropdownMenu1\"\n                  data-toggle=\"dropdown\"\n                  aria-haspopup=\"true\"\n                  aria-expanded=\"false\"\n                >\n                  {this.state.speedState}\n                </button>\n                <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenu1\">\n                  <button\n                    className=\"dropdown-item btn-light\"\n                    type=\"button\"\n                    onClick={() => this.changeSpeed(\"Slow\")}\n                  >\n                    Slow\n                  </button>\n                  <button\n                    className=\"dropdown-item btn-light\"\n                    type=\"button\"\n                    onClick={() => this.changeSpeed(\"Medium\")}\n                  >\n                    Medium\n                  </button>\n                  <button\n                    className=\"dropdown-item btn-light\"\n                    type=\"button\"\n                    onClick={() => this.changeSpeed(\"Fast\")}\n                  >\n                    Fast\n                  </button>\n                </div>\n              </div>{\" \"}\n            </li>\n            <li>\n              <button\n                id=\"stop\"\n                type=\"button\"\n                className=\"btn btn-warning\"\n                onClick={() => this.stopAnimation()}\n              >\n                {this.state.pathState ? \"Stop\" : \"Resume\"}\n              </button>\n            </li>\n          </ul>\n        </div>\n      </nav>\n    );\n  }\n}\nexport default NavBar;\n","export function dijkstra(grid, startNode, finishNode) {\n  if (!startNode || !finishNode || startNode === finishNode) {\n    return false;\n  }\n  startNode.distance = 0;\n  let unvisitedNodes = getNodes(grid);\n  let visitedNodesInOrder = [];\n  while (unvisitedNodes.length !== 0) {\n    unvisitedNodes.sort((a, b) => a.distance - b.distance);\n    let closestNode = unvisitedNodes.shift();\n    if (closestNode.isWall) continue;\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    updateUnvisitedNeighbours(closestNode, grid);\n  }\n}\n\nfunction getNodes(grid) {\n  let nodes = [];\n  for (let row of grid) {\n    for (let node of row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\n\nfunction updateUnvisitedNeighbours(node, grid) {\n  let unvisitedNeighbours = getUnvisitedNeighbours(node, grid);\n  for (let unvisitedNeighbour of unvisitedNeighbours) {\n    unvisitedNeighbour.distance = node.distance + 1;\n    unvisitedNeighbour.previousNode = node;\n  }\n}\n\nfunction getUnvisitedNeighbours(node, grid) {\n  let neighbours = [];\n  let { row, col } = node;\n  if (row !== 0) neighbours.push(grid[row - 1][col]);\n  if (col !== grid[0].length - 1) neighbours.push(grid[row][col + 1]);\n  if (row !== grid.length - 1) neighbours.push(grid[row + 1][col]);\n  if (col !== 0) neighbours.push(grid[row][col - 1]);\n  return neighbours\n    .filter((neighbour) => !neighbour.isWall)\n    .filter((neighbour) => !neighbour.isVisited);\n}\n\nexport function getNodesInShortestPathOrderDijkstra(finishNode) {\n  let nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}\n","export function astar(grid, startNode, finishNode) {\n  if (!startNode || !finishNode || startNode === finishNode) {\n    return false;\n  }\n  let unvisitedNodes = []; //open list\n  let visitedNodesInOrder = []; //closed list\n  startNode.distance = 0;\n  unvisitedNodes.push(startNode);\n\n  while (unvisitedNodes.length !== 0) {\n    unvisitedNodes.sort((a, b) => a.totalDistance - b.totalDistance); // sort by f(n) totalDistance\n    let closestNode = unvisitedNodes.shift();\n    if (closestNode === finishNode) return visitedNodesInOrder;\n\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n\n    let neighbours = getNeighbours(closestNode, grid);\n    for (let neighbour of neighbours) {\n      let distance = closestNode.distance + 1;\n      //f(n) = g(n) + h(n)\n      if (neighbourNotInUnvisitedNodes(neighbour, unvisitedNodes)) {\n        unvisitedNodes.unshift(neighbour);\n        neighbour.distance = distance;\n        neighbour.totalDistance =\n          distance + manhattenDistance(neighbour, finishNode);\n        neighbour.previousNode = closestNode;\n      } else if (distance < neighbour.distance) {\n        neighbour.distance = distance;\n        neighbour.totalDistance =\n          distance + manhattenDistance(neighbour, finishNode);\n        neighbour.previousNode = closestNode;\n      }\n    }\n  }\n  return visitedNodesInOrder;\n}\n\nfunction getNeighbours(node, grid) {\n  let neighbours = [];\n  let { row, col } = node;\n  if (col !== grid[0].length - 1) neighbours.push(grid[row][col + 1]);\n  if (row !== grid.length - 1) neighbours.push(grid[row + 1][col]);\n  if (col !== 0) neighbours.push(grid[row][col - 1]);\n  if (row !== 0) neighbours.push(grid[row - 1][col]);\n  return neighbours.filter(\n    (neighbour) => !neighbour.isWall && !neighbour.isVisited\n  );\n}\n\nfunction neighbourNotInUnvisitedNodes(neighbour, unvisitedNodes) {\n  for (let node of unvisitedNodes) {\n    if (node.row === neighbour.row && node.col === neighbour.col) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction manhattenDistance(node, finishNode) {\n  let x = Math.abs(node.row - finishNode.row);\n  let y = Math.abs(node.col - finishNode.col);\n  return x + y;\n}\n\nexport function getNodesInShortestPathOrderAstar(finishNode) {\n  let nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}\n","export function breadthFirstSearch(grid, startNode, finishNode) {\n  if (!startNode || !finishNode || startNode === finishNode) {\n    return false;\n  }\n  let unvisitedNodes = [];\n  let visitedNodesInOrder = [];\n  unvisitedNodes.push(startNode);\n  while (unvisitedNodes.length !== 0) {\n    let closestNode = unvisitedNodes.shift();\n    if (closestNode.isWall) continue;\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    visitedNodesInOrder.push(closestNode);\n    closestNode.isVisited = true;\n    let unvisitedNeighbours = getUnvisitedNeighbours(closestNode, grid);\n    for (let unvisitedNeighbour of unvisitedNeighbours) {\n      unvisitedNeighbour.previousNode = closestNode;\n      if (neighbourNotInUnvisitedNodes(unvisitedNeighbour, unvisitedNodes)) {\n        unvisitedNodes.push(unvisitedNeighbour);\n      }\n    }\n  }\n  return visitedNodesInOrder;\n}\n\nfunction getUnvisitedNeighbours(node, grid) {\n  let neighbours = [];\n  let { row, col } = node;\n  if (row !== 0) neighbours.push(grid[row - 1][col]);\n  if (col !== grid[0].length - 1) neighbours.push(grid[row][col + 1]);\n  if (row !== grid.length - 1) neighbours.push(grid[row + 1][col]);\n  if (col !== 0) neighbours.push(grid[row][col - 1]);\n  return neighbours.filter((neighbour) => !neighbour.isVisited);\n}\n\nfunction neighbourNotInUnvisitedNodes(neighbour, unvisitedNodes) {\n  for (let node of unvisitedNodes) {\n    if (node.row === neighbour.row && node.col === neighbour.col) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function getNodesInShortestPathOrderBFS(finishNode) {\n  let nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}\n","export function depthFirstSearch(grid, startNode, finishNode) {\n  if (!startNode || !finishNode || startNode === finishNode) {\n    return false;\n  }\n  let unvisitedNodes = [];\n  let visitedNodesInOrder = [];\n  unvisitedNodes.push(startNode);\n  while (unvisitedNodes.length !== 0) {\n    let closestNode = unvisitedNodes.shift();\n    if (closestNode.isWall) continue;\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    visitedNodesInOrder.push(closestNode);\n    closestNode.isVisited = true;\n    let unvisitedNeighbours = getUnvisitedNeighbours(closestNode, grid);\n    unvisitedNeighbours = shuffle(unvisitedNeighbours);\n    for (let unvisitedNeighbour of unvisitedNeighbours) {\n      unvisitedNeighbour.previousNode = closestNode;\n      unvisitedNodes.unshift(unvisitedNeighbour);\n    }\n  }\n  return visitedNodesInOrder;\n}\n\nfunction getUnvisitedNeighbours(node, grid) {\n  let neighbours = [];\n  let { row, col } = node;\n  if (col !== 0) neighbours.push(grid[row][col - 1]);\n  if (row !== 0) neighbours.push(grid[row - 1][col]);\n  if (col !== grid[0].length - 1) neighbours.push(grid[row][col + 1]);\n  if (row !== grid.length - 1) neighbours.push(grid[row + 1][col]);\n  return neighbours.filter((neighbour) => !neighbour.isVisited);\n}\n// Fisher-Yates Shuffle\nfunction shuffle(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    let j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n}\n\nexport function getNodesInShortestPathOrderDFS(finishNode) {\n  let nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}\n","export function randomWalk(grid, startNode, finishNode) {\n  if (!startNode || !finishNode || startNode === finishNode) {\n    return false;\n  }\n  let visitedNodesInOrder = [];\n  let closestNode = startNode;\n  let maxNodes = grid.length * grid[0].length;\n  let maxNodesVisitedTracker = 0;\n  let loopTracker = 0;\n  while (true) {\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    let randomNeighbour = getRandomNeighbour(closestNode, grid, finishNode);\n    let nodesVisited = numNodesVisited(grid);\n    if (nodesVisited === maxNodes - 2) {\n      return visitedNodesInOrder;\n    }\n    if (nodesVisited > maxNodesVisitedTracker) {\n      maxNodesVisitedTracker = nodesVisited;\n      loopTracker = 0;\n    } else if ((nodesVisited = maxNodesVisitedTracker)) {\n      loopTracker += 1;\n      if (loopTracker > 1000) {\n        return visitedNodesInOrder;\n      }\n    }\n    randomNeighbour.previousNode = closestNode;\n    closestNode = randomNeighbour;\n  }\n}\n\nfunction getRandomNeighbour(node, grid, finishNode) {\n  let neighbours = [];\n  let { row, col } = node;\n  if (row !== 0) neighbours.push(grid[row - 1][col]);\n  if (col !== grid[0].length - 1) neighbours.push(grid[row][col + 1]);\n  if (row !== grid.length - 1) neighbours.push(grid[row + 1][col]);\n  if (col !== 0) neighbours.push(grid[row][col - 1]);\n  let neighboursFilteredStartAndWall = neighbours.filter(\n    (neighbour) => !neighbour.isStart && !neighbour.isWall\n  );\n  let neighboursFilteredVisited = neighboursFilteredStartAndWall.filter(\n    (neighbour) => !neighbour.isVisited\n  );\n  if (neighboursFilteredVisited.length > 0) {\n    return neighboursFilteredVisited[\n      Math.floor(Math.random() * neighboursFilteredVisited.length)\n    ];\n  }\n  return neighboursFilteredStartAndWall[\n    Math.floor(Math.random() * neighboursFilteredStartAndWall.length)\n  ];\n}\n\nfunction numNodesVisited(grid) {\n  let count = 0;\n  for (let row of grid) {\n    for (let node of row) {\n      if (node.isVisited || node.isWall) count += 1;\n    }\n  }\n  return count;\n}\n","export function greedyBFS(grid, startNode, finishNode) {\n  if (!startNode || !finishNode || startNode === finishNode) {\n    return false;\n  }\n  let unvisitedNodes = []; //open list\n  let visitedNodesInOrder = []; //closed list\n  startNode.distance = 0;\n  unvisitedNodes.push(startNode);\n\n  while (unvisitedNodes.length !== 0) {\n    unvisitedNodes.sort((a, b) => a.totalDistance - b.totalDistance);\n    let closestNode = unvisitedNodes.shift();\n    if (closestNode === finishNode) return visitedNodesInOrder;\n\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n\n    let neighbours = getNeighbours(closestNode, grid);\n    for (let neighbour of neighbours) {\n      let distance = closestNode.distance + 1;\n      //f(n) = h(n)\n      if (neighbourNotInUnvisitedNodes(neighbour, unvisitedNodes)) {\n        unvisitedNodes.unshift(neighbour);\n        neighbour.distance = distance;\n        neighbour.totalDistance = manhattenDistance(neighbour, finishNode);\n        neighbour.previousNode = closestNode;\n      } else if (distance < neighbour.distance) {\n        neighbour.distance = distance;\n        neighbour.totalDistance = manhattenDistance(neighbour, finishNode);\n        neighbour.previousNode = closestNode;\n      }\n    }\n  }\n  return visitedNodesInOrder;\n}\n\nfunction getNeighbours(node, grid) {\n  let neighbours = [];\n  let { row, col } = node;\n  if (row !== 0) neighbours.push(grid[row - 1][col]);\n  if (col !== grid[0].length - 1) neighbours.push(grid[row][col + 1]);\n  if (row !== grid.length - 1) neighbours.push(grid[row + 1][col]);\n  if (col !== 0) neighbours.push(grid[row][col - 1]);\n  return neighbours.filter(\n    (neighbour) => !neighbour.isWall && !neighbour.isVisited\n  );\n}\n\nfunction manhattenDistance(node, finishNode) {\n  let x = Math.abs(node.row - finishNode.row);\n  let y = Math.abs(node.col - finishNode.col);\n  return x + y;\n}\n\nfunction neighbourNotInUnvisitedNodes(neighbour, unvisitedNodes) {\n  for (let node of unvisitedNodes) {\n    if (node.row === neighbour.row && node.col === neighbour.col) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function getNodesInShortestPathOrderGreedyBFS(finishNode) {\n  let nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}\n","export function bidirectionalGreedySearch(grid, startNode, finishNode) {\n  if (!startNode || !finishNode || startNode === finishNode) {\n    return false;\n  }\n  let unvisitedNodesStart = [];\n  let visitedNodesInOrderStart = [];\n  let unvisitedNodesFinish = [];\n  let visitedNodesInOrderFinish = [];\n  startNode.distance = 0;\n  finishNode.distance = 0;\n  unvisitedNodesStart.push(startNode);\n  unvisitedNodesFinish.push(finishNode);\n\n  while (\n    unvisitedNodesStart.length !== 0 &&\n    unvisitedNodesFinish.length !== 0\n  ) {\n    unvisitedNodesStart.sort((a, b) => a.totalDistance - b.totalDistance);\n    unvisitedNodesFinish.sort((a, b) => a.totalDistance - b.totalDistance);\n    let closestNodeStart = unvisitedNodesStart.shift();\n    let closestNodeFinish = unvisitedNodesFinish.shift();\n\n    closestNodeStart.isVisited = true;\n    closestNodeFinish.isVisited = true;\n    visitedNodesInOrderStart.push(closestNodeStart);\n    visitedNodesInOrderFinish.push(closestNodeFinish);\n    if (isNeighbour(closestNodeStart, closestNodeFinish)) {\n      return [visitedNodesInOrderStart, visitedNodesInOrderFinish, true];\n    }\n\n    //Start side search\n    let neighbours = getNeighbours(closestNodeStart, grid);\n    for (let neighbour of neighbours) {\n      if (!neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesFinish)) {\n        visitedNodesInOrderStart.push(closestNodeStart);\n        visitedNodesInOrderFinish.push(neighbour);\n        return [visitedNodesInOrderStart, visitedNodesInOrderFinish, true];\n      }\n      let distance = closestNodeStart.distance + 1;\n      //f(n) = h(n)\n      if (neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesStart)) {\n        unvisitedNodesStart.unshift(neighbour);\n        neighbour.distance = distance;\n        neighbour.totalDistance = manhattenDistance(neighbour, finishNode);\n        neighbour.previousNode = closestNodeStart;\n      } else if (distance < neighbour.distance) {\n        neighbour.distance = distance;\n        neighbour.totalDistance = manhattenDistance(neighbour, finishNode);\n        neighbour.previousNode = closestNodeStart;\n      }\n    }\n\n    //Finish side search\n    neighbours = getNeighbours(closestNodeFinish, grid);\n    for (let neighbour of neighbours) {\n      if (!neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesStart)) {\n        visitedNodesInOrderFinish.push(closestNodeFinish);\n        visitedNodesInOrderStart.push(neighbour);\n        return [visitedNodesInOrderStart, visitedNodesInOrderFinish, true];\n      }\n      let distance = closestNodeFinish.distance + 1;\n      //f(n) = h(n)\n      if (neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesFinish)) {\n        unvisitedNodesFinish.unshift(neighbour);\n        neighbour.distance = distance;\n        neighbour.totalDistance = manhattenDistance(neighbour, startNode);\n        neighbour.previousNode = closestNodeFinish;\n      } else if (distance < neighbour.distance) {\n        neighbour.distance = distance;\n        neighbour.totalDistance = manhattenDistance(neighbour, startNode);\n        neighbour.previousNode = closestNodeFinish;\n      }\n    }\n  }\n  return [visitedNodesInOrderStart, visitedNodesInOrderFinish, false];\n}\n\nfunction isNeighbour(closestNodeStart, closestNodeFinish) {\n  let rowStart = closestNodeStart.row;\n  let colStart = closestNodeStart.col;\n  let rowFinish = closestNodeFinish.row;\n  let colFinish = closestNodeFinish.col;\n  if (rowFinish === rowStart - 1 && colFinish === colStart) return true;\n  if (rowFinish === rowStart && colFinish === colStart + 1) return true;\n  if (rowFinish === rowStart + 1 && colFinish === colStart) return true;\n  if (rowFinish === rowStart && colFinish === colStart - 1) return true;\n  return false;\n}\n\nfunction getNeighbours(node, grid) {\n  let neighbours = [];\n  let { row, col } = node;\n  if (row !== 0) neighbours.push(grid[row - 1][col]);\n  if (col !== grid[0].length - 1) neighbours.push(grid[row][col + 1]);\n  if (row !== grid.length - 1) neighbours.push(grid[row + 1][col]);\n  if (col !== 0) neighbours.push(grid[row][col - 1]);\n  return neighbours.filter(\n    (neighbour) => !neighbour.isWall && !neighbour.isVisited\n  );\n}\n\nfunction manhattenDistance(nodeA, nodeB) {\n  let x = Math.abs(nodeA.row - nodeB.row);\n  let y = Math.abs(nodeA.col - nodeB.col);\n  return x + y;\n}\n\nfunction neighbourNotInUnvisitedNodes(neighbour, unvisitedNodes) {\n  for (let node of unvisitedNodes) {\n    if (node.row === neighbour.row && node.col === neighbour.col) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function getNodesInShortestPathOrderBidirectionalGreedySearch(\n  nodeA,\n  nodeB\n) {\n  let nodesInShortestPathOrder = [];\n  let currentNode = nodeB;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.push(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  currentNode = nodeA;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}\n","import React, { Component } from \"react\";\nimport \"./pathfindingVisualizer.css\";\nimport Node from \"./Node/node\";\nimport NavBar from \"./navbar\";\n\n//Pathfinding Algorithms\nimport {\n  dijkstra,\n  getNodesInShortestPathOrderDijkstra,\n} from \"../pathfindingAlgorithms/dijkstra\";\nimport {\n  astar,\n  getNodesInShortestPathOrderAstar,\n} from \"../pathfindingAlgorithms/astar\";\nimport {\n  breadthFirstSearch,\n  getNodesInShortestPathOrderBFS,\n} from \"../pathfindingAlgorithms/breadthFirstSearch\";\nimport {\n  depthFirstSearch,\n  getNodesInShortestPathOrderDFS,\n} from \"../pathfindingAlgorithms/depthFirstSearch\";\nimport { randomWalk } from \"../pathfindingAlgorithms/randomWalk\";\nimport {\n  greedyBFS,\n  getNodesInShortestPathOrderGreedyBFS,\n} from \"../pathfindingAlgorithms/greedyBestFirstSearch\";\nimport {\n  bidirectionalGreedySearch,\n  getNodesInShortestPathOrderBidirectionalGreedySearch,\n} from \"../pathfindingAlgorithms/bidirectionalGreedySearch\";\n\n//Maze Algorithms\nimport { randomMaze } from \"../mazeAlgorithms/randomMaze\";\nimport { recursiveDivisionMaze } from \"../mazeAlgorithms/recursiveDivision\";\nimport { verticalMaze } from \"../mazeAlgorithms/verticalMaze\";\nimport { horizontalMaze } from \"../mazeAlgorithms/horizontalMaze\";\n// Based on window's width to set the initial grid precisely\nconst initialNum = getInitialNum(window.innerWidth, window.innerHeight);\nconst initialNumRows = initialNum[0];\nconst initialNumColumns = initialNum[1];\n\nconst startFinishNode = getStartFinishNode(initialNumRows, initialNumColumns);\nlet startNodeRow = startFinishNode[0];\nlet startNodeCol = startFinishNode[1];\nlet finishNodeRow = startFinishNode[2];\nlet finishNodeCol = startFinishNode[3];\n\nclass PathfindingVisualizer extends Component {\n  state = {\n    grid: [],\n    mouseIsPressed: false,\n    movingStartorFinish: [false, \"\"],\n    visualizingAlgorithm: false,\n    generatingMaze: false,\n    width: window.innerWidth,\n    height: window.innerHeight,\n    numRows: initialNumRows,\n    numColumns: initialNumColumns,\n    speed: 10,\n    mazeSpeed: 5,\n  };\n\n  updateDimensions = () => {\n    this.setState({\n      width: window.innerWidth,\n      height: window.innerHeight,\n    });\n  };\n\n  updateSpeed = (path, maze) => {\n    this.setState({ speed: path, mazeSpeed: maze });\n  };\n\n  componentDidMount() {\n    window.addEventListener(\"resize\", this.updateDimensions);\n    const grid = getInitialGrid(this.state.numRows, this.state.numColumns);\n    this.setState({ grid });\n  }\n\n  handleMouseDown(row, col) {\n    let isStartorFinish = (row === startNodeRow && col === startNodeCol) || (row === finishNodeRow && col === finishNodeCol);\n    if ((row === startNodeRow && col === startNodeCol)) {\n      this.setState({ mouseIsPressed: true, movingStartorFinish: [true, \"Start\"] });\n    } else if ((row === finishNodeRow && col === finishNodeCol)) {\n      this.setState({ mouseIsPressed: true, movingStartorFinish: [true, \"Finish\"] });\n    } else if (!isStartorFinish) {\n      const newGrid = getNewGridWithWalls(this.state.grid, row, col);\n      this.setState({ grid: newGrid, mouseIsPressed: true });\n    }\n    \n  }\n\n  handleMouseEnter(row, col) {\n    if (this.state.movingStartorFinish[0]) {\n      const newGrid = getNewGridWithNewStartorFinish(this.state.grid, row, col, this.state.movingStartorFinish);\n      this.setState({ grid: newGrid, mouseIsPressed: true });\n    }\n    if (this.state.mouseIsPressed && !this.state.movingStartorFinish[0]) {\n      const newGrid = getNewGridWithWalls(this.state.grid, row, col);\n      this.setState({ grid: newGrid, mouseIsPressed: true });\n    }\n  }\n\n  handleMouseUp() {\n    this.setState({ mouseIsPressed: false, movingStartorFinish: [false, \"\"] });\n  }\n\n  clearGrid() {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n    for (let row = 0; row < this.state.grid.length; row++) {\n      for (let col = 0; col < this.state.grid[0].length; col++) {\n        if (\n          !(\n            (row === startNodeRow && col === startNodeCol) ||\n            (row === finishNodeRow && col === finishNodeCol)\n          )\n        ) {\n          document.getElementById(`node-${row}-${col}`).className = \"node\";\n        }\n      }\n    }\n    const newGrid = getInitialGrid(this.state.numRows, this.state.numColumns);\n    this.setState({\n      grid: newGrid,\n      visualizingAlgorithm: false,\n      generatingMaze: false,\n    });\n  }\n\n  clearPath() {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n    for (let row = 0; row < this.state.grid.length; row++) {\n      for (let col = 0; col < this.state.grid[0].length; col++) {\n        if (\n          document.getElementById(`node-${row}-${col}`).className ===\n          \"node node-shortest-path\" || document.getElementById(`node-${row}-${col}`).className ===\n          \"node node-shortest-path-hover\"\n        ) {\n          document.getElementById(`node-${row}-${col}`).className = \"node\";\n        }\n      }\n    }\n    const newGrid = getGridWithoutPath(this.state.grid);\n    this.setState({\n      grid: newGrid,\n      visualizingAlgorithm: false,\n      generatingMaze: false,\n    });\n  }\n\n  animateShortestPath = (nodesInShortestPathOrder, visitedNodesInOrder) => {\n    if (nodesInShortestPathOrder.length === 1)\n      this.setState({ visualizingAlgorithm: false });\n    for (let i = 1; i < nodesInShortestPathOrder.length; i++) {\n      if (i === nodesInShortestPathOrder.length - 1) {\n        setTimeout(() => {\n          let newGrid = updateNodesForRender(\n            this.state.grid,\n            nodesInShortestPathOrder,\n            visitedNodesInOrder\n          );\n          this.setState({ grid: newGrid, visualizingAlgorithm: false });\n        }, i * (3 * this.state.speed));\n        for (let j = 1; j < nodesInShortestPathOrder.length - 1; j++) {\n          setTimeout(() => {\n            let node = nodesInShortestPathOrder[j];\n            document.getElementById(`node-${node.row}-${node.col}`).className =\n              \"node node-shortest-path-hover\";\n            for (let k = 1; k < 5; k++) {\n              if (j < 2 || j - k < 1) continue;\n              let previousNode = nodesInShortestPathOrder[j - k];\n              document.getElementById(`node-${previousNode.row}-${previousNode.col}`).className =\n                \"node node-shortest-path\";\n            }\n            if (j === nodesInShortestPathOrder.length - 2)\n              document.getElementById(`node-${node.row}-${node.col}`).className =\n                \"node node-shortest-path\";\n          }, (nodesInShortestPathOrder.length + j*3) * (3 * this.state.speed));\n        }\n        return;\n      }\n      let node = nodesInShortestPathOrder[i];\n      setTimeout(() => {\n        //shortest path node\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-shortest-path\";\n      }, i * (3 * this.state.speed));\n    }\n  }\n\n  animateAlgorithm = (visitedNodesInOrder, nodesInShortestPathOrder) => {\n    let newGrid = this.state.grid.slice();\n    for (let row of newGrid) {\n      for (let node of row) {\n        let newNode = {\n          ...node,\n          isVisited: false,\n        };\n        newGrid[node.row][node.col] = newNode;\n      }\n    }\n    this.setState({ grid: newGrid });\n    for (let i = 1; i <= visitedNodesInOrder.length; i++) {\n      let node = visitedNodesInOrder[i];\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(\n            nodesInShortestPathOrder,\n            visitedNodesInOrder\n          );\n        }, i * this.state.speed);\n        return;\n      }\n      setTimeout(() => {\n        //visited node\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-visited\";\n      }, i * this.state.speed);\n    }\n  }\n\n  animateRandomWalk = (visitedNodesInOrder) => {\n    let nodeCounts = new Map();\n    for (let i = 1; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.setState({ visualizingAlgorithm: false });\n        }, i * this.state.speed);\n        return;\n      }\n      let node = visitedNodesInOrder[i];\n      if (!nodeCounts.has(node)) nodeCounts.set(node, {val: 1});\n      else nodeCounts.get(node).val++;\n      if (i === visitedNodesInOrder.length - 1) {\n        setTimeout(() => {\n          //finish node\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            \"node node-finish-reached\";\n        }, i * this.state.speed);\n        continue;\n      }\n\n      setTimeout(() => {\n        //visited node\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-visited\";\n        \n        if (nodeCounts.get(node).val > 1) {\n          // let visitedKeyframes = this.getkeyframes(\"visitedAnimation\");\n          document.getElementById(`node-${node.row}-${node.col}`).className = \"node node-visited-2\";\n          // document.getElementById(`node-${node.row}-${node.col}`).style.backgroundColor = `rgb(${(200 + nodeCounts.get(node).val) % 255}, 0, 255, 0.75)`;\n        }\n      }, i * this.state.speed);\n    }\n  };\n\n  getkeyframes(name) {\n    let animation = {};\n    let styleSheetList = document.styleSheets;\n    for (let listIndex = 0; listIndex < styleSheetList.length; listIndex++) {\n      const styleSheet = styleSheetList[listIndex];\n      if (Object.keys(styleSheet.cssRules).length > 100) continue;\n      for (let i = 0; i < Object.keys(styleSheet.cssRules).length; i++) {\n        const item = styleSheet;\n        if (item && item.cssRules[i].name && item.cssRules[i].name === name) {\n          animation.cssRule = item.cssRules[i];\n          animation.styleSheet = styleSheetList[listIndex];\n          animation.index = i;\n        }\n      }\n    }\n    return animation;\n  }\n\n  animateBidirectionalAlgorithm(\n    visitedNodesInOrderStart,\n    visitedNodesInOrderFinish,\n    nodesInShortestPathOrder,\n    isShortedPath\n  ) {\n    let len = Math.max(\n      visitedNodesInOrderStart.length,\n      visitedNodesInOrderFinish.length\n    );\n    for (let i = 1; i <= len; i++) {\n      let nodeA = visitedNodesInOrderStart[i];\n      let nodeB = visitedNodesInOrderFinish[i];\n      if (i === visitedNodesInOrderStart.length) {\n        setTimeout(() => {\n          let visitedNodesInOrder = getVisitedNodesInOrder(\n            visitedNodesInOrderStart,\n            visitedNodesInOrderFinish\n          );\n          if (isShortedPath) {\n            this.animateShortestPath(\n              nodesInShortestPathOrder,\n              visitedNodesInOrder\n            );\n          } else {\n            this.setState({ visualizingAlgorithm: false });\n          }\n        }, i * this.state.speed);\n        return;\n      }\n      setTimeout(() => {\n        //visited nodes\n        if (nodeA !== undefined)\n          document.getElementById(`node-${nodeA.row}-${nodeA.col}`).className =\n            \"node node-visited\";\n        if (nodeB !== undefined)\n          document.getElementById(`node-${nodeB.row}-${nodeB.col}`).className =\n            \"node node-visited\";\n      }, i * this.state.speed);\n    }\n  }\n\n  visualizeDijkstra() {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n    this.setState({ visualizingAlgorithm: true });\n    setTimeout(() => {\n      const { grid } = this.state;\n      const startNode = grid[startNodeRow][startNodeCol];\n      const finishNode = grid[finishNodeRow][finishNodeCol];\n      const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n      const nodesInShortestPathOrder = getNodesInShortestPathOrderDijkstra(\n        finishNode\n      );\n      this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\n    }, this.state.speed);\n  }\n\n  visualizeAStar() {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n    this.setState({ visualizingAlgorithm: true });\n    setTimeout(() => {\n      const { grid } = this.state;\n      const startNode = grid[startNodeRow][startNodeCol];\n      const finishNode = grid[finishNodeRow][finishNodeCol];\n      const visitedNodesInOrder = astar(grid, startNode, finishNode);\n      const nodesInShortestPathOrder = getNodesInShortestPathOrderAstar(\n        finishNode\n      );\n      this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\n    }, this.state.speed);\n  }\n\n  visualizeBFS() {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n    this.setState({ visualizingAlgorithm: true });\n    setTimeout(() => {\n      const { grid } = this.state;\n      const startNode = grid[startNodeRow][startNodeCol];\n      const finishNode = grid[finishNodeRow][finishNodeCol];\n      const visitedNodesInOrder = breadthFirstSearch(\n        grid,\n        startNode,\n        finishNode\n      );\n      const nodesInShortestPathOrder = getNodesInShortestPathOrderBFS(\n        finishNode\n      );\n      this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\n    }, this.state.speed);\n  }\n\n  visualizeDFS() {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n    this.setState({ visualizingAlgorithm: true });\n    setTimeout(() => {\n      const { grid } = this.state;\n      const startNode = grid[startNodeRow][startNodeCol];\n      const finishNode = grid[finishNodeRow][finishNodeCol];\n      const visitedNodesInOrder = depthFirstSearch(grid, startNode, finishNode);\n      const nodesInShortestPathOrder = getNodesInShortestPathOrderDFS(\n        finishNode\n      );\n      this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\n    }, this.state.speed);\n  }\n\n  visualizeRandomWalk() {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n    this.setState({ visualizingAlgorithm: true });\n    setTimeout(() => {\n      const { grid } = this.state;\n      const startNode = grid[startNodeRow][startNodeCol];\n      const finishNode = grid[finishNodeRow][finishNodeCol];\n      const visitedNodesInOrder = randomWalk(grid, startNode, finishNode);\n      this.animateRandomWalk(visitedNodesInOrder);\n    }, this.state.speed);\n  }\n\n  visualizeGreedyBFS() {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n    this.setState({ visualizingAlgorithm: true });\n    setTimeout(() => {\n      const { grid } = this.state;\n      const startNode = grid[startNodeRow][startNodeCol];\n      const finishNode = grid[finishNodeRow][finishNodeCol];\n      const visitedNodesInOrder = greedyBFS(grid, startNode, finishNode);\n      const nodesInShortestPathOrder = getNodesInShortestPathOrderGreedyBFS(\n        finishNode\n      );\n      this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\n    }, this.state.speed);\n  }\n\n  visualizeBidirectionalGreedySearch() {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n    this.setState({ visualizingAlgorithm: true });\n    setTimeout(() => {\n      const { grid } = this.state;\n      const startNode = grid[startNodeRow][startNodeCol];\n      const finishNode = grid[finishNodeRow][finishNodeCol];\n      const visitedNodesInOrder = bidirectionalGreedySearch(\n        grid,\n        startNode,\n        finishNode\n      );\n      const visitedNodesInOrderStart = visitedNodesInOrder[0];\n      const visitedNodesInOrderFinish = visitedNodesInOrder[1];\n      const isShortedPath = visitedNodesInOrder[2];\n      const nodesInShortestPathOrder = getNodesInShortestPathOrderBidirectionalGreedySearch(\n        visitedNodesInOrderStart[visitedNodesInOrderStart.length - 1],\n        visitedNodesInOrderFinish[visitedNodesInOrderFinish.length - 1]\n      );\n      this.animateBidirectionalAlgorithm(\n        visitedNodesInOrderStart,\n        visitedNodesInOrderFinish,\n        nodesInShortestPathOrder,\n        isShortedPath\n      );\n    }, this.state.speed);\n  }\n\n  animateMaze = (walls) => {\n    for (let i = 0; i <= walls.length; i++) {\n      if (i === walls.length) {\n        setTimeout(() => {\n          this.clearGrid();\n          let newGrid = getNewGridWithMaze(this.state.grid, walls);\n          this.setState({ grid: newGrid, generatingMaze: false });\n        }, i * this.state.mazeSpeed);\n        return;\n      }\n      let wall = walls[i];\n      let node = this.state.grid[wall[0]][wall[1]];\n      setTimeout(() => {\n        //Walls\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-wall-animated\";\n      }, i * this.state.mazeSpeed);\n    }\n  }\n\n  generateRandomMaze() {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n    this.setState({ generatingMaze: true });\n    setTimeout(() => {\n      const { grid } = this.state;\n      const startNode = grid[startNodeRow][startNodeCol];\n      const finishNode = grid[finishNodeRow][finishNodeCol];\n      const walls = randomMaze(grid, startNode, finishNode);\n      this.animateMaze(walls);\n    }, this.state.mazeSpeed);\n  }\n\n  generateRecursiveDivisionMaze() {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n    this.setState({ generatingMaze: true });\n    setTimeout(() => {\n      const { grid } = this.state;\n      const startNode = grid[startNodeRow][startNodeCol];\n      const finishNode = grid[finishNodeRow][finishNodeCol];\n      const walls = recursiveDivisionMaze(grid, startNode, finishNode);\n      this.animateMaze(walls);\n    }, this.state.mazeSpeed);\n  }\n\n  generateVerticalMaze() {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n    this.setState({ generatingMaze: true });\n    setTimeout(() => {\n      const { grid } = this.state;\n      const startNode = grid[startNodeRow][startNodeCol];\n      const finishNode = grid[finishNodeRow][finishNodeCol];\n      const walls = verticalMaze(grid, startNode, finishNode);\n      this.animateMaze(walls);\n    }, this.state.mazeSpeed);\n  }\n\n  generateHorizontalMaze() {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n    this.setState({ generatingMaze: true });\n    setTimeout(() => {\n      const { grid } = this.state;\n      const startNode = grid[startNodeRow][startNodeCol];\n      const finishNode = grid[finishNodeRow][finishNodeCol];\n      const walls = horizontalMaze(grid, startNode, finishNode);\n      this.animateMaze(walls);\n    }, this.state.mazeSpeed);\n  }\n\n  render() {\n    let { grid } = this.state;\n    return (\n      <React.Fragment>\n        <NavBar\n          visualizingAlgorithm={this.state.visualizingAlgorithm}\n          generatingMaze={this.state.generatingMaze}\n          visualizeDijkstra={this.visualizeDijkstra.bind(this)}\n          visualizeAStar={this.visualizeAStar.bind(this)}\n          visualizeGreedyBFS={this.visualizeGreedyBFS.bind(this)}\n          visualizeBidirectionalGreedySearch={this.visualizeBidirectionalGreedySearch.bind(\n            this\n          )}\n          visualizeBFS={this.visualizeBFS.bind(this)}\n          visualizeDFS={this.visualizeDFS.bind(this)}\n          visualizeRandomWalk={this.visualizeRandomWalk.bind(this)}\n          generateRandomMaze={this.generateRandomMaze.bind(this)}\n          generateRecursiveDivisionMaze={this.generateRecursiveDivisionMaze.bind(\n            this\n          )}\n          generateVerticalMaze={this.generateVerticalMaze.bind(this)}\n          generateHorizontalMaze={this.generateHorizontalMaze.bind(this)}\n          clearGrid={this.clearGrid.bind(this)}\n          clearPath={this.clearPath.bind(this)}\n          updateSpeed={this.updateSpeed.bind(this)}\n        />\n        <div\n          className={\n            this.state.visualizingAlgorithm || this.state.generatingMaze\n              ? \"grid-visualizing\"\n              : \"grid\"\n          }\n        >\n          {grid.map((row, rowId) => {\n            return (\n              <div key={rowId}>\n                {row.map((node, nodeId) => {\n                  const {\n                    row,\n                    col,\n                    isStart,\n                    isFinish,\n                    isVisited,\n                    isShortest,\n                    isWall,\n                  } = node;\n                  return (\n                    <Node\n                      key={nodeId}\n                      row={row}\n                      col={col}\n                      isStart={isStart}\n                      isFinish={isFinish}\n                      isVisited={isVisited}\n                      isShortest={isShortest}\n                      isWall={isWall}\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                      onMouseEnter={(row, col) =>\n                        this.handleMouseEnter(row, col)\n                      }\n                      onMouseUp={() => this.handleMouseUp()}\n                      width={this.state.width}\n                      height={this.state.height}\n                      numRows={this.state.numRows}\n                      numColumns={this.state.numColumns}\n                    ></Node>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nfunction getInitialNum(width, height) {\n  let numColumns;\n  if (width > 1500) {\n    numColumns = Math.floor(width / 25);\n  } else if (width > 1250) {\n    numColumns = Math.floor(width / 22.5);\n  } else if (width > 1000) {\n    numColumns = Math.floor(width / 20);\n  } else if (width > 750) {\n    numColumns = Math.floor(width / 17.5);\n  } else if (width > 500) {\n    numColumns = Math.floor(width / 15);\n  } else if (width > 250) {\n    numColumns = Math.floor(width / 12.5);\n  } else if (width > 0) {\n    numColumns = Math.floor(width / 10);\n  }\n  let cellWidth = Math.floor(width / numColumns);\n  let numRows = Math.floor(height / cellWidth);\n  return [numRows, numColumns];\n};\n// return two array that contains [2,4,6,8,...] and [-2,-4,-6,-8...], and length is num/4 approx.\nfunction getRandomNums(num) {\n  let randomNums1 = [];\n  let temp = 2;\n  for (let i = 5; i < num / 2; i += 2) {\n    randomNums1.push(temp);\n    temp += 2;\n  }\n  let randomNums2 = [];\n  temp = -2;\n  for (let i = num / 2; i < num - 5; i += 2) {\n    randomNums2.push(temp);\n    temp -= 2;\n  }\n  return [randomNums1, randomNums2];\n};\n/*numRows < numColumns          numRows > numColumns\n----------------------          ------------\n|  s                 |          |          |\n|                    |          |  s       |\n|                f   |          |          |\n----------------------          |       f  |\n                                |          |\n                                ------------\nMaking start point close to topLeft, finish point to the bottomRight\n*/\nfunction getStartFinishNode(numRows, numColumns) {\n  let randomNums;\n  let x, y;\n  let startNodeRow, startNodeCol;\n  let finishNodeRow, finishNodeCol;\n  if (numRows < numColumns) {\n    randomNums = getRandomNums(numRows);// randomNums[0]-->positive, randomNums[1]-->negative\n    x = Math.floor(numRows / 2);\n    y = Math.floor(numColumns / 4);\n    if (x % 2 !== 0) x -= 1;\n    if (y % 2 !== 0) y += 1;\n    startNodeRow = x + getNumberfromArray(randomNums[1]);\n    startNodeCol = y + [-8, -6, -4, -2, 0][Math.floor(Math.random() * 5)];\n    finishNodeRow = x + getNumberfromArray(randomNums[0]);\n    finishNodeCol = numColumns - y + [0, 2, 4, 6, 8][Math.floor(Math.random() * 5)];\n  } else {\n    randomNums = getRandomNums(numColumns);\n    x = Math.floor(numRows / 4);\n    y = Math.floor(numColumns / 2);\n    if (x % 2 !== 0) x -= 1;\n    if (y % 2 !== 0) y += 1;\n    startNodeRow = x + [-8, -6, -4, -2, 0][Math.floor(Math.random() * 5)];\n    startNodeCol = y + getNumberfromArray(randomNums[1]);\n    finishNodeRow = numRows - x + [0, 2, 4, 6, 8][Math.floor(Math.random() * 5)];\n    finishNodeCol = y + getNumberfromArray(randomNums[0]);\n  }\n  return [startNodeRow, startNodeCol, finishNodeRow, finishNodeCol];\n};\n\nfunction getNumberfromArray(array) {\n  let length = array.length;\n  let randomIndex = Math.floor(Math.random() * length);\n  return array[randomIndex];\n};\n\nconst getInitialGrid = (numRows, numColumns) => {\n  let grid = [];\n  for (let row = 0; row < numRows; row++) {\n    let currentRow = [];\n    for (let col = 0; col < numColumns; col++) {\n      currentRow.push(createNode(row, col));\n    }\n    grid.push(currentRow);\n  }\n  return grid;\n};\n\nconst createNode = (row, col) => {\n  return {\n    row,\n    col,\n    isStart: row === startNodeRow && col === startNodeCol,\n    isFinish: row === finishNodeRow && col === finishNodeCol,\n    distance: Infinity,\n    totalDistance: Infinity,\n    isVisited: false,\n    isShortest: false,\n    isWall: false,\n    previousNode: null,\n  };\n};\n\nconst getNewGridWithWalls = (grid, row, col) => {\n  let newGrid = grid.slice();\n  let node = grid[row][col];\n  let newNode = {\n    ...node,\n    isWall: !node.isWall,\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nconst getNewGridWithNewStartorFinish = (grid, row, col, movingGrid) => {\n  let newGrid = grid.slice();\n  let node = grid[row][col];\n  if (movingGrid[1] === \"Start\") {\n    if (row === finishNodeRow && col === finishNodeCol) return newGrid;\n    grid[startNodeRow][startNodeCol].isStart = false;\n    startNodeRow = row;\n    startNodeCol = col;\n    let newStart = {\n      ...node,\n      isStart: !node.isStart,\n      isWall: false,\n    };\n    newGrid[row][col] = newStart;\n  } else if (movingGrid[1] === \"Finish\") {\n    if (row === startNodeRow && col === startNodeCol) return newGrid;\n    grid[finishNodeRow][finishNodeCol].isFinish = false;\n    finishNodeRow = row;\n    finishNodeCol = col;\n    let newFinish = {\n      ...node,\n      isFinish: !node.isFinish,\n      isWall: false,\n    };\n    newGrid[row][col] = newFinish;\n  }\n  return newGrid;\n};\n\nconst getNewGridWithMaze = (grid, walls) => {\n  let newGrid = grid.slice();\n  for (let wall of walls) {\n    let node = grid[wall[0]][wall[1]];\n    let newNode = {\n      ...node,\n      isWall: true,\n    };\n    newGrid[wall[0]][wall[1]] = newNode;\n  }\n  return newGrid;\n};\n\nconst getGridWithoutPath = (grid) => {\n  let newGrid = grid.slice();\n  for (let row of grid) {\n    for (let node of row) {\n      let newNode = {\n        ...node,\n        distance: Infinity,\n        totalDistance: Infinity,\n        isVisited: false,\n        isShortest: false,\n        previousNode: null,\n      };\n      newGrid[node.row][node.col] = newNode;\n    }\n  }\n  return newGrid;\n};\n\nconst updateNodesForRender = (\n  grid,\n  nodesInShortestPathOrder,\n  visitedNodesInOrder\n) => {\n  let newGrid = grid.slice();\n  for (let node of visitedNodesInOrder) {\n    if (\n      (node.row === startNodeRow && node.col === startNodeCol) ||\n      (node.row === finishNodeRow && node.col === finishNodeCol)\n    )\n      continue;\n    let newNode = {\n      ...node,\n      isVisited: true,\n    };\n    newGrid[node.row][node.col] = newNode;\n  }\n  for (let node of nodesInShortestPathOrder) {\n    if (node.row === finishNodeRow && node.col === finishNodeCol) {\n      return newGrid;\n    }\n    let newNode = {\n      ...node,\n      isVisited: false,\n      isShortest: true,\n    };\n    newGrid[node.row][node.col] = newNode;\n  }\n};\n\nconst getVisitedNodesInOrder = (\n  visitedNodesInOrderStart,\n  visitedNodesInOrderFinish\n) => {\n  let visitedNodesInOrder = [];\n  let n = Math.max(\n    visitedNodesInOrderStart.length,\n    visitedNodesInOrderFinish.length\n  );\n  for (let i = 0; i < n; i++) {\n    if (visitedNodesInOrderStart[i] !== undefined) {\n      visitedNodesInOrder.push(visitedNodesInOrderStart[i]);\n    }\n    if (visitedNodesInOrderFinish[i] !== undefined) {\n      visitedNodesInOrder.push(visitedNodesInOrderFinish[i]);\n    }\n  }\n  return visitedNodesInOrder;\n};\n\nexport default PathfindingVisualizer;\n\n","export function randomMaze(grid, startNode, finishNode) {\n  if (!startNode || !finishNode || startNode === finishNode) {\n    return false;\n  }\n  let walls = [];\n  for (let row = 0; row < grid.length; row++) {\n    for (let col = 0; col < grid[0].length; col++) {\n      if (\n        (row === startNode.row && col === startNode.col) ||\n        (row === finishNode.row && col === finishNode.col)\n      )\n        continue;\n      if (Math.random() < 0.33) {\n        walls.push([row, col]);\n      }\n    }\n  }\n  // disrupt the order to make maze more irregular, <0 ascending; >0 descending\n  walls.sort(() => Math.random() - 0.5);\n  return walls;\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"bootstrap/js/dist/dropdown\";\nimport PathfindingVisualizer from \"./pathfindingVisualizer/pathfindingVisualizer\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <PathfindingVisualizer />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}